import re
from datetime import datetime, timezone

from aiogram import Router
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from src.data_collection_bot import UserService, User, UpdateUserDTO
from src.data_collection_bot.bot.states import UserRegistrationStates


router = Router()


def get_router() -> Router:
    return router


async def user_start(
        msg: Message,
        state: FSMContext
):
    await msg.answer(text="üëã–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –±–æ—Ç –¥–ª—è —Å–±–æ—Ä–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö.\n"
                          "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8.00 —è –±—É–¥—É –ø—Ä–æ—Å–∏—Ç—å –í–∞—Å –∑–∞–ø–æ–ª–Ω—è—Ç—å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏.")
    await msg.answer(text="–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–π–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ä–æ—Ç–∫—É—é —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n"
                          "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ—ë –Ω–∞—Å—Ç–æ—è—â–µ–µ –∏–º—è (–∏–º—è —Ä–µ–±—ë–Ω–∫–∞, –µ—Å–ª–∏ –í—ã —Ä–æ–¥–∏—Ç–µ–ª—å)")
    await state.set_state(UserRegistrationStates.awaiting_first_name)
    await state.update_data(user_tg_id=msg.from_user.id)


@router.message(StateFilter(UserRegistrationStates.awaiting_first_name))
async def user_enter_first_name(msg: Message, state: FSMContext):
    first_name = msg.text
    await state.update_data(first_name=first_name)
    await state.set_state(UserRegistrationStates.awaiting_last_name)
    await msg.answer(text="–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ—é –Ω–∞—Å—Ç–æ—è—â—É—é —Ñ–∞–º–∏–ª–∏—é (—Ñ–∞–º–∏–ª–∏—é —Ä–µ–±—ë–Ω–∫–∞, –µ—Å–ª–∏ –í—ã —Ä–æ–¥–∏—Ç–µ–ª—å)")


@router.message(StateFilter(UserRegistrationStates.awaiting_last_name))
async def user_enter_last_name(msg: Message, state: FSMContext):
    last_name = msg.text
    await state.update_data(last_name=last_name)
    await state.set_state(UserRegistrationStates.awaiting_patronymic)
    await msg.answer(
        text="–ö–ª–∞—Å—Å! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ—ë –Ω–∞—Å—Ç–æ—è—â–µ–µ –æ—Ç—á–µ—Å—Ç–≤–æ (–æ—Ç—á–µ—Å—Ç–≤–æ —Ä–µ–±—ë–Ω–∫–∞, –µ—Å–ª–∏ –í—ã —Ä–æ–¥–∏—Ç–µ–ª—å) ",
        parse_mode='html',
    )


@router.message(UserRegistrationStates.awaiting_patronymic)
async def user_enter_patronymic(msg: Message, state: FSMContext):
    patronymic = msg.text
    await state.update_data(patronymic=patronymic)
    await state.set_state(UserRegistrationStates.awaiting_birthday)
    await msg.answer(text="–°—É–ø–µ—Ä! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ—é –Ω–∞—Å—Ç–æ—è—â—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è —Ä–µ–±—ë–Ω–∫–∞, –µ—Å–ª–∏ –í—ã —Ä–æ–¥–∏—Ç–µ–ª—å)\n"
                          "<i>–î–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –≤ –≤–∏–¥–µ –î–î.–ú–ú.–ì–ì–ì–ì. –ü—Ä–∏–º–µ—Ä: 23.07.2006</i>", parse_mode="HTML")


@router.message(StateFilter(UserRegistrationStates.awaiting_birthday))
async def user_enter_birthday(msg: Message, state: FSMContext, user_service: UserService):
    birthday = msg.text

    if not check_birthday(birthday):
        await msg.answer(text="–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–ª–∏ —Ç–∞–∫–æ–π –¥–∞—Ç—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.\n"
                              "<i>–î–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –≤ –≤–∏–¥–µ –î–î.–ú–ú.–ì–ì–ì–ì. –ü—Ä–∏–º–µ—Ä: 23.07.2006</i>", parse_mode="HTML")
        await state.set_state(UserRegistrationStates.awaiting_birthday)
        return

    bd: datetime = datetime.strptime(birthday, "%d.%m.%Y")

    data = await state.get_data()
    user_tg_id = data.get("user_tg_id")
    first_name = data.get("first_name")
    last_name = data.get("last_name")
    patronymic = data.get("patronymic")

    user: User = await user_service.get_user_by_telegram_id(user_tg_id)

    user_dto = UpdateUserDTO(first_name=first_name, last_name=last_name, patronymic=patronymic, birthday=bd)

    await user_service.update(item_id=user.id, item=user_dto)

    await msg.answer(text="–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")


def check_birthday(birthday: str) -> bool:
    if not re.match(r'^\d{2}\.\d{2}\.\d{4}$', birthday):
        return False

    try:
        bd: datetime = datetime.strptime(birthday, '%d.%m.%Y')

        if bd.timestamp() > datetime.now(timezone.utc).timestamp():
            return False

        return True
    except ValueError:
        return False